#
# more information can be found here http://sonata-project.org/bundles/media
#
sonata_media:
    db_driver:       doctrine_orm # | doctrine_mongodb
    default_context: default
    contexts:
        default:  # the default context is mandatory
            download:
                mode: http # X-Sendfile | http
            providers:
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.youtube
                - sonata.media.provider.vimeo

            formats:
                small: { width: 150, quality: 100}
                wide:   { width: 1170 , quality: 100}
                full:   { width: 1920 , quality: 100}

        Posts:
            providers:
                - sonata.media.provider.image
            formats:
                thumbnail: { width: 300, quality: 100}
                wide:     { width: 1170, quality: 100}


        Categorias:
            providers:
              - sonata.media.provider.image

            formats:
                icon: { width: 42, quality: 100 }
                thumbnail: { width: 269, quality: 100}
                wide:    { width: 1170, quality: 100}

        Produtos:
            providers:
                - sonata.media.provider.image

            formats:
                main:     { width: 300, quality: 100}
                view:     { width: 750, height: 300, quality: 100}
                wide:     { width: 1170, quality: 100}

        Parceiros:
            providers:
                - sonata.media.provider.image
            formats:
                small: { width: 200, quality: 100 }
                view: { width: 750, quality: 100 }
                wide: { width: 1170, quality: 100 }

        Downloads:
            providers:
                - sonata.media.provider.file
            formats:
                preview:   { width: 100, quality: 100}
                main:     { width: 300, quality: 100}

        Videos:
            providers:
                - sonata.media.provider.vimeo
            formats:
                small: { width: 450, quality: 100}
                wide:   { width: 1170 , quality: 100}
                full:   { width: 1920 , quality: 100}



    cdn:
        # define the public base url for the uploaded media
        server:
            path:      %sonata_media.cdn.host%

    filesystem:
        # define where the uploaded file will be stored
        local:
            directory:  %sonata_media.filesystem.local.directory% #%kernel.root_dir%/../web/uploads/media
            create:     true

    providers:
        file:
            # the resizer must be set to false, otherwhise this can delete icon files from the fs
            resizer:    false
            allowed_extensions:
                - 'pdf'
                - 'txt'
                - 'rtf'
                - 'doc'
                - 'docx'
                - 'xls'
                - 'xlsx'
                - 'ppt'
                - 'pttx'
                - 'odt'
                - 'odg'
                - 'odp'
                - 'ods'
                - 'odc'
                - 'odf'
                - 'odb'
                - 'csv'
                - 'xml'
                - 'exe'
                - 'zip'
                - '7z'
            allowed_mime_types:
                - 'application/pdf'
                - 'application/x-pdf'
                - 'application/rtf'
                - 'text/html'
                - 'text/rtf'
                - 'text/plain'
                - 'application/x-dosexec'
                - 'application/x-msdownload'
                - 'application/octet-stream'
                - 'application/exe'
                - 'application/x-exe'
                - 'application/dos-exe'
                - 'vms/exe'
                - 'application/x-winexe'
                - 'application/msdos-windows'
                - 'application/x-msdos-program'
                - 'application/msword'
                - 'application/doc'
                - 'appl/text'
                - 'application/vnd.msword'
                - 'application/vnd.ms-word'
                - 'application/winword'
                - 'application/word'
                - 'application/x-msw6'
                - 'application/x-msword'
                - 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                - 'application/zip'
                - 'application/x-zip'
                - 'application/x-zip-compressed'
                - 'application/octet-stream'
                - 'application/x-compress'
                - 'application/x-compressed'
                - 'multipart/x-zip'
                - 'application/x-7z-compressed'
        image:
           thumbnail: sonata.media.thumbnail.format          # default value
           resizer: sonata.media.resizer.custom
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#            thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        vimeo:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        youtube:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image

    pixlr:
        enabled:  true
        referrer: ACL Security

    resizer:
        simple:
            mode:  outbound
#            mode:  inset

#
# The LiipImagineBundle can be used if you want to convert on demand an image
# to a specific format. (ie a controller render the file)
#    more information can be found here : https://github.com/liip/LiipImagineBundle
#
#liip_imagine:
#    filter_sets:
#
#        # this configuration match the sonata_media configuration format definition
#        sonata_product_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_product_small:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [200, 100], mode: outbound }
#
#        sonata_product_large:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [600, 100], mode: outbound }
#
#        news_abstract:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        news_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        sonata_collection_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_collection_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        sonata_category_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_category_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        default_small:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        default_big:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 70], mode: outbound }

# Enable Doctrine to map the provided entities
doctrine:
    orm:
        entity_managers:
            default:
                mappings:
                    ApplicationSonataMediaBundle: ~
                    SonataMediaBundle: ~
